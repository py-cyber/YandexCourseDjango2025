# Generated by Django 5.2 on 2025-04-08 07:15

import django.core.validators
import django.db.models.deletion
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('problems', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=75, verbose_name='name')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
            },
        ),
        migrations.AlterModelOptions(
            name='problem',
            options={'verbose_name': 'problem', 'verbose_name_plural': 'problems'},
        ),
        migrations.AlterModelOptions(
            name='testcase',
            options={'verbose_name': 'test case', 'verbose_name_plural': 'tests cases'},
        ),
        migrations.RemoveField(
            model_name='problem',
            name='difficulty',
        ),
        migrations.RemoveField(
            model_name='testcase',
            name='input_field',
        ),
        migrations.RemoveField(
            model_name='testcase',
            name='output',
        ),
        migrations.AddField(
            model_name='problem',
            name='auther_language',
            field=models.TextField(
                choices=[('Py3.11', 'Python 3.11')],
                default='Py3.11',
                verbose_name='author language',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='problem',
            name='auther_solution',
            field=models.TextField(
                default='',
                help_text="The author's solution is to take a long time to pass all the tests",
                max_length=8000,
                verbose_name='author solution',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='problem',
            name='difficult',
            field=models.PositiveIntegerField(
                default=1,
                help_text='Assess the complexity of your task',
                validators=[django.core.validators.MaxValueValidator(100)],
                verbose_name='difficult',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='problem',
            name='input_format',
            field=tinymce.models.HTMLField(
                default='',
                help_text='Input data format',
                max_length=1000,
                verbose_name='input data format',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='problem',
            name='output_format',
            field=tinymce.models.HTMLField(
                default='',
                help_text='Output data format',
                max_length=1000,
                verbose_name='output data format',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='testcase',
            name='input_data',
            field=models.TextField(
                default='',
                help_text='Input data for the test. It will be passed to the program during execution via the standard stream',
                max_length=10000000,
                verbose_name='input data',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='testcase',
            name='output_data',
            field=models.TextField(
                default='',
                help_text='Test output. The program should output exactly this text in this format',
                max_length=10000000,
                verbose_name='output data',
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='problem',
            name='author',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='tasks',
                to=settings.AUTH_USER_MODEL,
                verbose_name='author',
            ),
        ),
        migrations.AlterField(
            model_name='problem',
            name='description',
            field=tinymce.models.HTMLField(
                help_text='Explain the idea of the task',
                max_length=8000,
                verbose_name='description',
            ),
        ),
        migrations.AlterField(
            model_name='problem',
            name='is_public',
            field=models.BooleanField(
                default=False,
                help_text='If you open the task for public access, other users will be able to add it to their contests, and moderation will be able to evaluate it and add it to the general pool of tasks',
                verbose_name='is public',
            ),
        ),
        migrations.AlterField(
            model_name='problem',
            name='title',
            field=models.CharField(max_length=75, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='testcase',
            name='is_sample',
            field=models.BooleanField(
                default=False,
                help_text='If True, then this test will be shown as an example.',
                verbose_name='is sample',
            ),
        ),
        migrations.AlterField(
            model_name='testcase',
            name='problem',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='tests',
                to='problems.problem',
                verbose_name='problem',
            ),
        ),
        migrations.AddField(
            model_name='problem',
            name='tags',
            field=models.ManyToManyField(
                blank=True, related_name='tasks', to='problems.tag', verbose_name='tags'
            ),
        ),
    ]
